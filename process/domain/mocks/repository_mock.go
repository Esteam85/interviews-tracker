// Code generated by MockGen. DO NOT EDIT.
// Source: process_repository.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	domain "github.com/esteam85/interviews-tracker/process/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockProcessRepository is a mock of ProcessRepository interface.
type MockProcessRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProcessRepositoryMockRecorder
}

// MockProcessRepositoryMockRecorder is the mock recorder for MockProcessRepository.
type MockProcessRepositoryMockRecorder struct {
	mock *MockProcessRepository
}

// NewMockProcessRepository creates a new mock instance.
func NewMockProcessRepository(ctrl *gomock.Controller) *MockProcessRepository {
	mock := &MockProcessRepository{ctrl: ctrl}
	mock.recorder = &MockProcessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessRepository) EXPECT() *MockProcessRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockProcessRepository) GetAll(ctx context.Context) ([]domain.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProcessRepositoryMockRecorder) GetAll(ctx context.Context) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProcessRepository)(nil).GetAll), ctx)
}

// Save mocks base method.
func (m *MockProcessRepository) Save(ctx context.Context, process *domain.Process) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, process)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProcessRepositoryMockRecorder) Save(ctx context.Context, process interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProcessRepository)(nil).Save), ctx, process)
}
